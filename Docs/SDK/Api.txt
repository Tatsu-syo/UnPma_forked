* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
            UnPma32.dll API仕様書 (1)
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

注意:
ヘッダファイルは、HArcLibを使用している他のDLLのヘッダファイルを、
プレフィックスをUnPmaに読み替えたものを使用してください。

XXindexXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  ∴ＡＰＩについて
  ∴エラーコードについて
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

∴ＡＰＩについて

　　C 形式となっていますので，C++ から使用する場合は extern "C" で宣言・使用
　するようにしてください。（UnPma32.hで定義しています）

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
　LHA.DLL 互換API
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPma(const HWND _hwnd, LPCSTR _szCmdLine, LPSTR _szOutput, const DWORD _dwSize);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	1
機能
	コマンド文字列で指定して、圧縮／解凍などを行います。

引数
	_hwnd		アプリケーションのウインドウを指定して下さい。
			このウィンドウの中央にウィンドウを表示します。
			ウインドウのないアプリケーションではNULLを指定して下さい。
	_szCmdLine	コマンド文字列。(Cmd.txt 参照)
	_szOutput	DLLからの結果報告を受け取るバッファ。sizeが0より大きければ
			終端'\0'は必ず付加されます。
	_dwSize		bufに確保してあるバイト数。結果出力が必要ない場合、
			0を指定して下さい。

戻り値
	0=正常終了 , その他=エラー(∴エラーコードについて 参照)

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
WORD WINAPI UnPmaGetVersion();
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	2
機能
	DLLのバージョン番号を返します。

戻り値
	バージョン番号×100。例えば、Ver 0.04なら 4 を返します。
	下位2ワードを得たい場合には、後述のUnPmaGetSubVersionを使用してください。
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
WORD WINAPI UnPmaGetCursorInterval();
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	7
機能
	カーソルの回転速度を得ます。
	UnPma32.dllでは値は保存しますが、動作に影響はありません。

戻り値
	カーソルの回転速度（msec)

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaSetCursorInterval(const WORD _Interval);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	8
機能
	カーソルの回転速度を設定します。
	UnPma32.dllでは値は保存しますが、動作に影響はありません。

引数
	_Interval	カーソルの回転速度（msec)

戻り値
	TRUE=正常終了（設定できた） , FALSE=異常終了

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaGetBackGroundMode();
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	5
機能
	DLLがバックグラウンドモードか否かを得ます。

戻り値
	TRUE=バックグラウンドモード , FALSE=非バックグラウンドモード

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaBackGroundMode(const BOOL _BackGroundMode);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	6
機能
	DLLのバックグラウンドモードを設定します。

引数
	_BackGroundMode		設定するバックグラウンドモード。

戻り値
	TRUE=正常終了（設定できた） , FALSE=異常終了

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaGetCursorMode();
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	3
機能
	DLLの動作中にカーソルを表示するモードか否かを得ます。

戻り値
	TRUE=表示モード , FALSE=非表示モード

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaSetCursorMode(const BOOL _CursorMode);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	4
機能
	DLLの動作中にカーソルを表示するモードか否かを設定します。

引数
	_CursorMode		設定するカーソルモード。

戻り値
	TRUE=正常終了（設定できた） , FALSE=異常終了

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaGetRunning();
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	10
機能
	現在DLLが動作中か否かを得ます。

戻り値
	TRUE=動作中 , FALSE=動作中で無い(使用可能)

備考
	UnPma32.dllは常にFALSEを返します。


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
　LHA.DLL非互換API
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaCheckArchive(LPCSTR _szFileName,const int _iMode);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	12
機能
	指定ファイルがサポートしている書庫ファイルとして
	正しいかどうかを返します。

引数
	_szFileName	チェックしたいファイル名。
	_iMode	チェックモード。
			CHECKARCHIVE_BASICを指定すると最初の3メンバのみチェックします。

戻り値
	TRUE=正常な書庫 , FALSE=正常な書庫でない

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaGetFileCount(LPCSTR _szArcFile);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	17
機能
	指定された書庫ファイルに格納されているファイル数を得ます。

引数
	_szArcFile	格納ファイル数を得たい書庫ファイル名。

戻り値
	格納ファイル数。エラー時は -1。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaQueryFunctionList(const int _iFunction);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	18
機能
	指定されたAPIが使用可能かどうかを得ます。

引数
	_iFunction	API を示す一意な数値。具体的な数値はUnPma32.h参照のこと。

戻り値
	TRUE=使用可能 , FALSE=使用不可

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaConfigDialog(const HWND _hwnd, LPSTR _lpszComBuffer,const int _iMode);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	11
機能
	本来はオプションを対話的に設定するためのAPIですが、
	現在は、単にバージョン情報を表示します。

戻り値
	TRUE=OK押下 , FALSE=キャンセル押下

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaExtractMem(const HWND _hwnd, LPCSTR _szCmdLine,
                LPBYTE _szBuffer, const DWORD _dwSize, time_t *_lpTime,
                LPWORD _lpwAttr, LPDWORD _lpdwWriteSize);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	49
機能
	メモリバッファへ展開します。 残念ながら，_lpdwWriteSize で指定
        したサイズごとに複数回に分けて処理…といった使用法は行えません。

戻り値
	-1(エントリのみ)

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaCompressMem(const HWND _hwnd, LPCSTR _szCmdLine,
                const LPBYTE _szBuffer, const DWORD _dwSize,
                const time_t *_lpTime, const LPWORD _lpwAttr,
                LPDWORD _lpdwWriteSize);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	50
機能
        メモリバッファの内容を圧縮して書庫に格納します。残念ながら，メモリ
        上に書庫を作成するわけではありません。

戻り値
	-1(エントリのみ)

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
　OpenArchive系API
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	以下の説明で
	「書庫ファイル」とは、操作しているUnPma書庫そのもの。
	「格納ファイル」とは、直前の検索にマッチした、書庫内のファイル。
	 引数 HARC _harc は、UnPmaOpenArchive()/UnPmaOpenArchive2() で返されたハンドル。
	を指します。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
HARC WINAPI UnPmaOpenArchive(const HWND _hwnd,LPCSTR _szFileName,const DWORD _dwMode);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	21
機能
	指定ファイルが有効な書庫ファイルならばオープンし、そのハンドルを
	返します。以後の書庫ファイルへのアクセスはこのハンドルで行います。

引数
	_hwnd　　　	アプリのウィンドウ・ハンドル。
	_szFileName	書庫ファイル名。
	_dwMode		処理モードを指定するフラグ(未使用)。

戻り値
	指定の書庫ファイルに対応したハンドル。エラー時は NULL。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
HARC WINAPI UnPmaOpenArchive2(const HWND _hwnd,LPCSTR _szFileName,const DWORD _dwMode, LPCSTR _szOption);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	112
機能
	指定ファイルが有効な書庫ファイルならばオープンし、そのハンドルを
	返します。以後の書庫ファイルへのアクセスはこのハンドルで行います。

引数
	_hwnd　　　	アプリのウィンドウ・ハンドル。
	_szFileName	書庫ファイル名。
	_dwMode		処理モードを指定するフラグ(未使用)。
	_szOption	スイッチ(未使用)。

戻り値
	指定の書庫ファイルに対応したハンドル。エラー時は NULL。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaCloseArchive(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	22
機能
	上記のAPIで割り付けたハンドルを解放します。

戻り値
	0=正常終了 , その他=エラー

備考
	UnPma32.dllでは、FreeLibrary時にハンドルリストを消去するようにはしていますが、
	自前で delete で解放しないでください。
	HArcLibでは、NULLになっていないハンドルは必ず解放するため、
	NULLにしていなかった場合落ちてしまいます。
	ですから、必ずこのAPIでお願いします。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaFindFirst(HARC _harc,LPCSTR _szWildName,LPINDIVIDUALINFO _lpSubInfo);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	23
機能
	最初の格納ファイルの情報を得ます。

引数
	_szWildName	検索するファイル名の指定。ワイルドカード指定可能。
			スペース区切りで複数指定も可能。
	_lpSubInfo	結果を返すための INDIVIDUALINFO 型の構造体へのポインタ。
			結果を必要としない場合は NULL を指定する事。

戻り値
	0=正常終了 , -1=検索終了 , その他=エラー

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaFindNext(HARC _harc,LPINDIVIDUALINFO _lpSubInfo);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	24
機能
	２番目以降の格納ファイルの情報を取得します。

引数
	_lpSubInfo	結果を返すための INDIVIDUALINFO 型の構造体へのポインタ。
			結果を必要としない場合は NULL を指定する事。

戻り値
	0=正常終了 , -1=検索終了 , その他=エラー

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaAdd(HARC _harc,LPCSTR _szFileName,DWORD _dwMode);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	26
機能
	指定されたファイルを圧縮、現在位置に追加します。

引数
	_szFileName	圧縮するファイル名。
	_dwMode		圧縮モード。

戻り値
	-1(エントリのみ)

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaExtract(HARC _harc,LPCSTR _szFileName,LPCSTR _szDirName,DWORD _dwMode);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	25
機能
	指定されたファイルを解凍します。

引数
	_szFileName	解凍するファイル名。
	_szDirName	解凍先ディレクトリ。最後に'\'を付けてください。
	_dwMode		解凍モード。

戻り値
	UnPma()と同じエラーコードが返ります。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaMove(HARC _harc,LPCSTR _szFileName,DWORD _dwMode);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	27
機能
	最初の格納ファイルを移動します。

引数
	_szFileName	移動先ファイル名。
	_dwMode		移動モード。

戻り値
	-1(エントリのみ)

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaDelete(HARC _harc,LPCSTR _szFileName,DWORD _dwMode);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	28
機能
	格納ファイルを削除します。

引数
	_szFileName	削除するファイル名。
	_dwMode		削除モード。

戻り値
	-1(エントリのみ)

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaGetArcFileName(HARC _harc,LPSTR _lpBuffer,const int _nSize);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	31
機能
	書庫ファイル名を得ます。

引数
	_lpBuffer	ファイル名を格納するバッファ。
	_nSize		バッファのサイズ。

戻り値
	0=正常終了 , -1=エラー , それ以外=必要なバッファのサイズ

備考
	0より大きい値が返ってきた場合でも、strncpyでコピーされてはいますので、
	_lpBufferを使用することは可能です(^^;;;

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
DWORD WINAPI UnPmaGetArcFileSize(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	32
機能
	書庫ファイルのサイズを得ます。

戻り値
	書庫ファイルのサイズ。エラー時は -1。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaGetArcFileSizeEx(HARC _harc,INT64 *_lpllSize);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	103
機能
	書庫ファイルのサイズを64bit整数で得ます。
引数
	_lpllSize	情報を格納するためのバッファへのポインタ。

戻り値
	TRUE=正常終了 FALSE=エラー

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
DWORD WINAPI UnPmaGetArcRatio(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	43
機能
	書庫全体の圧縮率を得ます。

戻り値
	圧縮率(千分率)。解凍後のサイズ合計が0なら0を返します。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
WORD WINAPI UnPmaGetArcDate(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	36
機能
	書庫ファイルの更新日付をDOS形式で得ます。

戻り値
	書庫ファイルの更新日付。エラー時には -1。形式は次のようなものです。
		ビット　　内容
		 0-4　　年月日の日 (1-31)
		 5-8　　年月日の月 (1-12)
		 9-15 　年月日の年 (1980年からの経過年数)
	※理論上は、2107年いっぱいまで表現できます。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
WORD WINAPI UnPmaGetArcTime(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	37
機能
	書庫ファイルの更新時刻をDOS形式で得ます。

戻り値
	書庫ファイルの更新時刻。エラー時には -1。形式は次のようなものです。
		ビット 　内容
		 0-4　　時分秒の秒 (2 で割算されている)
		 5-10 　時分秒の分 (0-59)
		11-15 　時分秒の時 (0-23)
	※Win95/Win98の一部以外は切り上げを行うことから、
	0.04からは、秒の端数は必ず切り上げを行うようにしてあります。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaGetArcCreateTimeEx(HARC _harc,FILETIME *_lpftCreationTime);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	68
機能
	書庫ファイルの作成日時を得ます。
引数
	_lpftCreationTime	情報を格納するFILETIME構造体へのポインタ。

戻り値
	TRUE=正常終了 FALSE=エラー
	FILETIME 形式とは， Jan.1,1601 00:00:00 からの100ns単位の
	経過時間を64bitの数値で表したものです。
	詳しくは Win32 API のヘルプ等を参照してください。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaGetArcAccessTimeEx(HARC _harc,FILETIME *_lpftLastAccessTime);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	69
機能
	書庫ファイルの最終アクセス日時を得ます。
引数
	_lpftLastAccessTime	情報を格納するFILETIME構造体へのポインタ。

戻り値
	TRUE=正常終了 FALSE=エラー

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaGetArcWriteTimeEx(HARC _harc,FILETIME *_lpftLastWriteTime);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	70
機能
	書庫ファイルの最終更新日時を得ます。
引数
	_lpftLastWriteTime	情報を格納するFILETIME構造体へのポインタ。

戻り値
	TRUE=正常終了 FALSE=エラー

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaIsSFXFile(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	39
機能
	書庫ファイルが自己解凍ファイルかどうかを得ます。

戻り値
	0=普通の書庫 1=SFX

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
UINT WINAPI UnPmaGetArcOSType(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	48
機能
	書庫を作成したOSを得ます。

戻り値
	常に15(OSTYPE_CPM)

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
DWORD WINAPI UnPmaGetArcOriginalSize(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	33
機能
	現時点までの検索にマッチしたファイルの（解凍後の）サイズの合計を得ます。

戻り値
	合計サイズ。エラー時は -1。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaGetArcOriginalSizeEx(HARC _harc,INT64 *_lpllSize);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	104
機能
	現時点までの検索にマッチしたファイルの (解凍後の) サイズの合計を64bit整数で得ます。
引数
	_lpllSize	情報を格納するためのバッファへのポインタ。

戻り値
	TRUE=正常終了 FALSE=エラー

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
DWORD WINAPI UnPmaGetArcCompressedSize(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	34
機能
	現時点までの検索にマッチしたファイルの (解凍前の) サイズの合計を得ます。

戻り値
	合計サイズ。エラー時は -1。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaGetArcCompressedSizeEx(HARC _harc,INT64 *_lpllSize);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	105
機能
	現時点までの検索にマッチしたファイルの (解凍前の) サイズの合計を64bit整数で得ます。
引数
	_lpllSize	情報を格納するためのバッファへのポインタ。

戻り値
	TRUE=正常終了 FALSE=エラー

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
DWORD WINAPI UnPmaGetArcReadSize(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	113
機能
	現時点までに書庫を読み込んだサイズを得ます。

戻り値
	合計サイズ。エラー時は -1。

備考
	実際に返すのは、UnPmaGetArcCompressedSize+(FindFirst(Ex)/FindNext(Ex)を行った回数)*0x10ですので
	ご注意ください。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaGetArcReadSizeEx(HARC _harc,INT64 *_lpllSize);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	114
機能
	現時点までに書庫を読み込んだサイズを64bit整数で得ます。
引数
	_lpllSize	情報を格納するためのバッファへのポインタ。

戻り値
	TRUE=正常終了 FALSE=エラー

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaGetFileName(HARC _harc,LPCSTR _lpBuffer,const int _nSize);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	40
機能
	格納ファイルのファイル名を得ます。

引数
	_lpBuffer	ファイル名を格納するバッファ。
	_nSize		バッファのサイズ。

戻り値
	0=正常終了 , -1=エラー , それ以外=必要なバッファのサイズ

備考
	0より大きい値が返ってきた場合でも、strncpyでコピーされてはいますので、
	_lpBufferを使用することは可能です(^^;;;

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
DWORD WINAPI UnPmaGetOriginalSize(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	41
機能
	格納ファイルの（解凍後の）サイズを得ます。

戻り値
	格納ファイルのサイズ。エラー時は -1。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaGetOriginalSizeEx(HARC _harc,INT64 *_lpllSize);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	106
機能
	格納ファイルのサイズを64bit整数で得ます。
引数
	_lpllSize	情報を格納するためのバッファへのポインタ。

戻り値
	TRUE=正常終了 FALSE=エラー

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
DWORD WINAPI UnPmaGetCompressedSize(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	42
機能
	格納ファイルの（解凍前の）サイズを得ます。

戻り値
	格納ファイルの解凍前のサイズ。エラー時は -1。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaGetCompressedSizeEx(HARC _harc,INT64 *_lpllSize);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	107
機能
	格納ファイルの圧縮サイズを64bit整数で得ます。
引数
	_lpllSize	情報を格納するためのバッファへのポインタ。

戻り値
	TRUE=正常終了 FALSE=エラー

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
WORD WINAPI UnPmaGetRatio(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	43
機能
	格納ファイルの圧縮率を得ます。

戻り値
	格納ファイルの圧縮率(千分率)。解凍後のサイズ合計が0なら0を返します。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
DWORD WINAPI UnPmaGetCRC(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	46
機能
	格納ファイルのCRCを得ます。

戻り値
	格納ファイルのチェックサム。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaGetAttribute(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	47
機能
	格納ファイルの属性を得ます。

戻り値
	格納ファイルの属性。FA_*の値をくみあわせたもの。


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
UINT WINAPI UnPmaGetOSType(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	48
機能
	格納ファイルの作成OSを得ます。

戻り値
	常に15(OSTYPE_CPM)

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaGetMethod(HARC _harc,LPSTR _lpBuffer,const int _nSize);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	61
機能
	格納ファイルの圧縮法を得ます。

引数
	_lpBuffer	ファイル名を格納するバッファ。
	_nSize		バッファのサイズ。

戻り値
	0=正常終了 , -1=エラー , それ以外=必要なバッファのサイズ

備考
	0より大きい値が返ってきた場合でも、strncpyでコピーされてはいますので、
	_lpBufferを使用することは可能です(^^;;;

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
WORD WINAPI UnPmaGetDate( HARC _harc );
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	44
機能
	格納ファイルの日付を得ます。

戻り値
	格納ファイルの日付。エラー時は -1。
	形式は MSDOS のタイムスタンプに準じます。(UnPmaGetArcDateの説明参照)

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
WORD WINAPI UnPmaGetTime( HARC _harc );
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	45
機能
	格納ファイルの時刻を得ます。

戻り値
	格納ファイルの時刻。エラー時は -1。
	形式は MSDOS のタイムスタンプに準じます。(UnPmaGetArcTimeの説明参照)

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
DWORD WINAPI UnPmaGetWriteTime(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	62
機能
	格納ファイルの最終更新日時を得ます。

戻り値
	格納ファイルの UNIX 形式の UTC による更新日時。エラー時は -1。
	UNIX 形式とは，Jan.1,1970 00:00:00 からの秒数。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
DWORD WINAPI UnPmaGetAccessTime(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	63
機能
	格納ファイルの最終アクセス日時を得ます。

戻り値
	格納ファイルの UNIX 形式の UTC による更新日時。エラー時は -1。
	UNIX 形式とは，Jan.1,1970 00:00:00 からの秒数。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
DWORD WINAPI UnPmaGetCreateTime(HARC _harc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	64
機能
	格納ファイルの作成日時を得ます。

戻り値
	格納ファイルの UNIX 形式の UTC による更新日時。エラー時は -1。
	UNIX 形式とは，Jan.1,1970 00:00:00 からの秒数。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaGetWriteTimeEx(HARC _harc,FILETIME *_lpftLastWritetime);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	65
機能
	格納ファイルの最終更新日時を得ます。
引数
	_lpftLastWriteTime	情報を格納するFILETIME構造体へのポインタ。

戻り値
	TRUE=正常終了 FALSE=エラー

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaGetCreateTimeEx(HARC _harc,FILETIME *_lpftCreationTime);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	66
機能
	格納ファイルの作成日時を得ます。
引数
	_lpftCreationTime	情報を格納するFILETIME構造体へのポインタ。

戻り値
	TRUE=正常終了 FALSE=エラー

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaGetAccessTimeEx(HARC _harc,FILETIME *_lpftLastAccessTime);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	67
機能
	格納ファイルの最終アクセス日時を得ます。
引数
	_lpftLastAccessTime	情報を格納するFILETIME構造体へのポインタ。

戻り値
	TRUE=正常終了 FALSE=エラー

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaGetMemo(HARC _harc,LPSTR _lpBuffer,const int _nSize);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
※UnPma32.dll独自APIです!

順序数	122
機能
	格納ファイルのメモを得ます。

引数
	_lpBuffer	ファイル名を格納するバッファ。
				NULLを指定した場合は必要なバッファのサイズを返します。
	_nSize		バッファのサイズ。
				0を指定した場合は必要なバッファのサイズを返します。

戻り値
	0=正常終了 , -1=エラー(_harcが不正orバッファ不足) , それ以外=必要なバッファのサイズ

備考
	_lpBufferをNULL、もしくは_nSizeを0にして実行すると、必要なバッファのサイズを返します。
	これが0であれば、メモが記録されていないと判断してください。

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
　SetOwnerWindow系API
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	UnPma32w,dllでは、UnPma()実行前にウィンドウおよびコールバックを
	保存しているため、UnPma()実行中にUnPma*OwnerWindow*を行うことで、
	同時に複数のコールバックを使用できます。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaSetOwnerWindow(const HWND _hwnd);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  90
機能
        UnPma32.dllのメッセージの送信先ウィンドウを設定します。UnPma32w.
        dllはここで指定されたウィンドウにメッセージを送信します。

引数
        _hwnd           メッセージを受け取るウィンドウ。

戻り値
        TRUE=正常終了 FALSE=別のウィンドウが設定されている

注意
        この API は 16  ビット版との互換性のために用意されているもので，
        今後の拡張も見込めません。従って，特に必要でない限り，後述の UnPma-
        SetOwnerWindowEx64() を使用するようにしてください。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaClearOwnerWindow();
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  91
機能
        UnPmaSetOwnerWindow() で設定したウィンドウの設定を解除します。

戻り値
        TRUE=正常終了 FALSE=UnPmaSetOwnerWindow以外のAPIを使用し登録した

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaSetOwnerWindowEx(const HWND _hwnd, LPARCHIVERPROC _lpArcProc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  51
機能
        UnPma32.dllの展開状況を受け取るためのコールバック関数の指定を行
        います。_lpArcProc に NULL を指定すると _hwnd で指定したウィンド
        ウに メッセージを送出します。

引数
        _hwnd           メッセージを受け取るウィンドウ。
        _lpArcProc      情報を受け取るためのコールバック関数へのポインタ。

戻り値
        TRUE=正常終了 FALSE=別のウィンドウが設定されている

注意
        この API によるコールバック関数が使用する構造体については， 仕様
        が固定されているために，今後の拡張が見込めません。なるべく後述の
        UnPmaSetOwnerWindowEx64() を使用するようにしてください。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaKillOwnerWindowEx(const HWND _hwnd);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  52
機能
        UnPmaSetOwnerWindowEx() で設定したウィンドウの設定を解除します。

引数
        _hwnd           指定してあると，UnPmaSetOwnerWindowEx() 時に指定
                        したものとの整合性チェックが行われます。

戻り値
        TRUE=正常終了 FALSE=UnPmaSetOwnerWindowEx以外のAPIを使用し登録した

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaSetOwnerWindowEx64(const HWND _hwnd,
        LPARCHIVERPROC _lpArcProc, DWORD _dwStructSize);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  108
機能
        UnPma32.DLL の展開状況を受け取るためのコールバック関数の指定を行
        います。_lpArcProc に NULL を指定すると _hwnd で指定したウィンド
        ウに メッセージを送出します。

引数
        _hwnd           メッセージを受け取るウィンドウ。
        _lpArcProc      情報を受け取るためのコールバック関数へのポインタ。
        _dwStructSize   使用する構造体のモード。実際には EXTRACTINGINFO-
                        EX，EXTRACTINGINFOEX32， EXTRACTINGINFOEX64 の中
                        で使用するものを決定し，そのサイズを指定する。

戻り値
        TRUE=正常終了 FALSE=別のウィンドウが設定されている/構造体のサイズに誤りがある

注意
        通常，API で使用する構造体については，仕様変更等が発生した場合に
        は，構造体のサイズ情報等を利用してアプリ側で対応することになりま
        すが， 使用 DLL の改版という比較的軽微な変更のために既存のアプリ
        が一時的にしろ利用できなくなるのは不便です。
        そのような状況を回避し，アプリ側で対応時期を決定できるようにする
        ため， この API については，API としての見通しが悪くなるデメリッ
        トを無視して，モード指定を行うようになっています。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaKillOwnerWindowEx64(const HWND _hwnd);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  109
機能
        UnPmaSetOwnerWindowEx64() で設定したウィンドウの設定を解除します。

引数
        _hwnd           指定してあると，UnPmaSetOwnerWindowEx64() 時に指
                        定したものとの整合性チェックが行われます。

戻り値
        TRUE=正常終了 FALSE=UnPmaSetOwnerWindowEx64以外のAPIを使用し登録した

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
　SetEnumMemberssProc系API
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	UnPma32w,dllでは、UnPma()実行前にウィンドウおよびコールバックを
	保存しているため、UnPma()実行中にUnPmaClearEnumMembersProc*を行うことで、
	同時に複数のコールバックを使用できます。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaSetEnumMembersProc(WND_ENUMMEMBPROC _lpEnumProc);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  99
機能
        UnPma32.dllが呼び出すコールバック関数の登録を行います。

引数
        _lpEnumProc     UnPma32.dllが呼び出すコールバック関数へのポインタ。

戻り値
	TRUE=正常終了 FALSE=別のコールバックが設定されている

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaClearEnumMembersProc();
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  100
機能
        UnPmaSetEnumMembersProc()で行った関数の登録を解除します。

戻り値
	TRUE=正常終了 FALSE=UnPmaSetEnumMembersProc以外のAPIを使用し登録した

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaSetEnumMembersProc64(WND_ENUMMEMBPROC
                _lpEnumProc, DWORD _dwStructSize);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  110
機能
        UnPma32.dllが呼び出すコールバック関数の登録を行います。

引数
        _lpEnumProc     UnPma32.dllが呼び出すコールバック関数へのポインタ。
        _dwStructSize   使用する構造体のモード。実際には ENUM_MEM-
                        BER_INFO， ENUM_MEMBER_INFO64 のどちらかで
                        使用するものを決定し，そのサイズを指定する。

戻り値
	TRUE=正常終了 FALSE=別のコールバックが設定されている/構造体サイズに誤りがある

注意
        通常，API で使用する構造体については，仕様変更等が発生した場合に
        は，構造体のサイズ情報等を利用してアプリ側で対応することになりま
        すが， 使用 DLL の改版という比較的軽微な変更のために既存のアプリ
        が一時的にしろ利用できなくなるのは不便です。
        そのような状況を回避し，アプリ側で対応時期を決定できるようにする
        ため， この API については，API としての見通しが悪くなるデメリッ
        トを無視して，モード指定を行うようになっています。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaClearEnumMembersProc64();
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  111
機能
        UnPmaSetEnumMembersProc64() で行った関数の登録を解除します。

戻り値
	TRUE=正常終了 FALSE=UnPmaSetEnumMembersProc64以外のAPIを使用し登録した


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
　その他のAPI
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
WORD WINAPI UnPmaGetSubVersion();
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	94
戻り値
	バージョン番号の下位２ワードを返します。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
WORD WINAPI UnPmaGetBuild();
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	95
戻り値
	ビルド番号を返します。
	バージョン番号の４ワードがインクリメントされなくとも、
	これはインクリメントされる可能性があります。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
void CALLBACK UnPmaRun(const HWND _hwnd,const HINSTANCE _hInst,LPCSTR _lpszCmdLine,const int _nCmdShow);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	96
機能
	Rundll32.exeから動作させることができます。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
void CALLBACK UnPmaCommandLine(const HWND _hwnd,const HINSTANCE _hInst,LPCSTR _lpszCmdLine,const int _nCmdShow);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	97
機能
	Rundll32.exeから動作させることができます。
	Tar32.dllとAPI名に互換性を持たせるために用意されたAPIです。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
BOOL WINAPI UnPmaSetPriority(int _nPriority)
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  119
機能
        UnPma32.dll の優先順位 (プライオリティ) を指定します。

引数
        _nPriority      優先順位。以下の値を指定できます：

                THREAD_PRIORITY_CRITICAL        スレッド標準の相対優先順位
                        (15)                    が15であれば31、そうでなけ
                                                れば15を指定します。
                THREAD_PRIORITY_HIGHEST         スレッド標準の相対優先順位
                        (2)                     より  2 ポイント高い優先順
                                                位を指定します。
                THREAD_PRIORITY_ABOVE_NORMAL    スレッド標準の相対優先順位
                        (1)                     より  1 ポイント高い優先順
                                                位を指定します。
                THREAD_PRIORITY_NORMAL          スレッド標準の相対優先順位
                        (0)                     を指定します。
                THREAD_PRIORITY_BELOW_NORMAL    スレッド標準の相対優先順位
                        (-1)                    より  1 ポイント低い優先順
                                                位を指定します。
                THREAD_PRIORITY_LOWEST          スレッド標準の相対優先順位
                        (-2)                    より  2 ポイント低い優先順
                                                位を指定します。
                THREAD_PRIORITY_IDLE            基本優先順位として  1 を指
                        (-15)                   定します。

戻り値
	TRUE=正常終了 FALSE=エラー

備考
        優先順位を下げても，他に高負荷を掛けるものが少ない場合は，結果とし
        て UnPma32.dll が殆どの CPU 時間を占有してしまいますので， THREAD_
        PRIORITY_BELOW_NORMAL 以下の (低い) 順位が指定された場合には，明示
        的に Sleep() API を使用して眠る仕様となっています。 

	実際には何の値を指定してもかまいませんが、指定された値を直接Set-
        ThreadPriority()に渡しています。ですから、THREAD_PRIORITY_CRITICAL
        を指定してシステムが不安定になっても責任は取れません。(^^;;;

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
void WINAPI SetLangueSpecified(LANGID _wLanguage);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  115
機能
        UnPma32.dllが使用するリソースの言語を指定します。

引数
        _wLanguage      使用する言語の言語識別子。  GetUserDefaultLangID()
                        API 等で得られるものと同じです。識別子の詳細につい
                        ては SDK 等を参照してください。

注意
        ここで設定されるのは，あくまでもリソース関係のみであることに注意し
        てください。 文字列比較をはじめとした Win32 API の動作を変更するわ
        けではありません。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
void WINAPI SetLangueJapanese();
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  101
機能
        UnPma32.dllが日本語リソースを使用するように設定します。

備考
        MAKELANGID(LANG_JAPANESE, SUBLANG_DEFAULT)  を指定して
        SetLangueSpecified() API を呼び出しています。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
void WINAPI SetLangueEnglish();
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  102
機能
        UnPma32.dllが米語リソースを使用するように設定します。

備考
        MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US) を指定して
        SetLangueSpecified() API を呼び出しています。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
void WINAPI UnPmaSetLangueSpecified(LANGID _wLanguage);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  116
機能
        UnPma32.dllが使用するリソースの言語を指定します。
        "UnPma" の名前が付加されたものを用意しただけで，SetLangueSpecifile
        () を呼び出しているに過ぎません。

引数
        _wLanguage      使用する言語の言語識別子。  GetUserDefaultLangID()
                        API 等で得られるものと同じです。識別子の詳細につい
                        ては SDK 等を参照してください。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
void WINAPI UnPmaSetLangueJapanese();
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  117
機能
        UnPma32.dllが日本語リソースを使用するように設定します。
        "UnPma" の名前が付加されたものを用意しただけで， SetLangueJapanese
        () を呼び出しているに過ぎません。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
void WINAPI UnPmaSetLangueEnglish();
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数  118
機能
        UnPma32.dllが米語リソースを使用するように設定します。
        "UnPma" の名前が付加されたものを用意しただけで，SetLangueEnglish()
        を呼び出しているに過ぎません。

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
　HArcLib Extended API
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	以下に挙げるAPIは、HArcLibにより拡張されたAPIです。
	現在、Silky氏がExtra-APIが作成中であり、将来そちらのほうが
	普及する可能性が高いです。
	ただし、対応アプリ側で、CreateArchive系APIを実装するまで
	多少の時間を要すると思われることから、それまでのつなぎとして
	作成されたAPIです。

<OpenArchive系>
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaFindFirstEx(HARC _harc,LPCSTR _szWildName,LPINDIVIDUALINFOEX _lpSubInfoEx);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	120
機能
	最初の格納ファイルの情報を得ます。

引数
	_szWildName	 検索するファイル名の指定。ワイルドカード指定可能。
				スペース区切りで複数指定も可能。
	_lpSubInfoEx	 結果を返すための INDIVIDUALINFOEX 型の構造体へのポインタ。
				結果を必要としない場合は NULL を指定する事。

戻り値
	0=正常終了 , -1=検索終了 , その他=エラー

備考
	_lpSubInfoExにNULLを指定するのであれば、UnPmaFindFirstを使用したほうが良いかもしれません。

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
int WINAPI UnPmaFindNextEx(HARC _harc,LPINDIVIDUALINFOEX _lpSubInfoEx);
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
順序数	121
機能
	２番目以降の格納ファイルの情報を取得します。

引数
	_lpSubInfoEx	 結果を返すための INDIVIDUALINFOEX 型の構造体へのポインタ。
				結果を必要としない場合は NULL を指定する事。

戻り値
	0=正常終了 , -1=検索終了 , その他=エラー
	
備考
	_lpSubInfoExにNULLを指定するのであれば、UnPmaFindNextを使用したほうが良いかもしれません。

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

∴エラーコードについて

　　UnPma32.dll が返すエラー値です。

	1			リストファイルが読み込めませんでした
	ERROR_FILE_CRC		CRCエラー
	ERROR_FILE_OPEN		ファイル(内部含む)が開けません
	ERROR_ALREADY_EXISTS	書庫がすでに存在します
	ERROR_COMMAND_NAME	コマンド指定が間違っています
	ERROR_USER_CANCEL	ユーザーによって処理を中断されました
	ERROR_CANNOT_WRITE	書き込みに失敗しました
	ERROR_NOT_ARC_FILE	書庫が指定されていません
	ERROR_CANNOT_READ	読み込みに失敗しました
	ERROR_NOT_FILENAME	圧縮ファイルまたは解凍先が指定されていません
